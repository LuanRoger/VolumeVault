// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VolumeVaultInfra.Book.Hug.Contexts;

#nullable disable

namespace VolumeVaultInfra.Book.Hug.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20230512185157_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("VolumeVaultInfra.Book.Hug.Models.Base.BookGenreModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int>("Book")
                        .HasColumnType("int");

                    b.Property<int>("Genre")
                        .HasColumnType("int");

                    b.Property<int>("UserIdentifier")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("Book");

                    b.HasIndex("Genre");

                    b.HasIndex("UserIdentifier");

                    b.ToTable("BookGenre");
                });

            modelBuilder.Entity("VolumeVaultInfra.Book.Hug.Models.Base.BookModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("author")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Author");

                    b.Property<string>("buyLink")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("BuyLink");

                    b.Property<string>("coverLink")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("CoverLink");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedAt");

                    b.Property<int?>("edition")
                        .HasColumnType("int")
                        .HasColumnName("Edition");

                    b.Property<int?>("format")
                        .HasColumnType("int")
                        .HasColumnName("Format");

                    b.Property<string>("isbn")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("varchar(17)")
                        .HasColumnName("ISBN");

                    b.Property<DateTime>("lastModification")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastModification");

                    b.Property<string>("observation")
                        .HasColumnType("longtext")
                        .HasColumnName("Obsevation");

                    b.Property<int>("ownerid")
                        .HasColumnType("int");

                    b.Property<int?>("pagesNumber")
                        .HasColumnType("int")
                        .HasColumnName("PagesNumber");

                    b.Property<int?>("publicationYear")
                        .HasColumnType("int")
                        .HasColumnName("PublicationYear");

                    b.Property<string>("publisher")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Publisher");

                    b.Property<DateTime?>("readEndDay")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ReadEndDay");

                    b.Property<DateTime?>("readStartDay")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ReadStartDay");

                    b.Property<int?>("readStatus")
                        .HasColumnType("int")
                        .HasColumnName("Readed");

                    b.Property<string>("synopsis")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("Synopsis");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Title");

                    b.HasKey("id");

                    b.HasIndex("ownerid");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("VolumeVaultInfra.Book.Hug.Models.Base.BookTagModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("BookId");

                    b.HasIndex("TagId");

                    b.ToTable("BookTag");
                });

            modelBuilder.Entity("VolumeVaultInfra.Book.Hug.Models.Base.GenreModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("genre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Genre");

                    b.HasKey("id");

                    b.HasIndex("genre")
                        .IsUnique();

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("VolumeVaultInfra.Book.Hug.Models.Base.TagModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("tag")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Tag");

                    b.HasKey("id");

                    b.HasIndex("tag")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("VolumeVaultInfra.Book.Hug.Models.Base.UserIdentifier", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("userIdentifier")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("UserIdentifier");

                    b.HasKey("id");

                    b.HasIndex("userIdentifier")
                        .IsUnique();

                    b.ToTable("UserIdentifier");
                });

            modelBuilder.Entity("VolumeVaultInfra.Book.Hug.Models.Base.BookGenreModel", b =>
                {
                    b.HasOne("VolumeVaultInfra.Book.Hug.Models.Base.BookModel", "book")
                        .WithMany()
                        .HasForeignKey("Book")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VolumeVaultInfra.Book.Hug.Models.Base.GenreModel", "genre")
                        .WithMany()
                        .HasForeignKey("Genre")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VolumeVaultInfra.Book.Hug.Models.Base.UserIdentifier", "userIdentifier")
                        .WithMany()
                        .HasForeignKey("UserIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("book");

                    b.Navigation("genre");

                    b.Navigation("userIdentifier");
                });

            modelBuilder.Entity("VolumeVaultInfra.Book.Hug.Models.Base.BookModel", b =>
                {
                    b.HasOne("VolumeVaultInfra.Book.Hug.Models.Base.UserIdentifier", "owner")
                        .WithMany()
                        .HasForeignKey("ownerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("owner");
                });

            modelBuilder.Entity("VolumeVaultInfra.Book.Hug.Models.Base.BookTagModel", b =>
                {
                    b.HasOne("VolumeVaultInfra.Book.Hug.Models.Base.BookModel", "book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VolumeVaultInfra.Book.Hug.Models.Base.TagModel", "tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("book");

                    b.Navigation("tag");
                });
#pragma warning restore 612, 618
        }
    }
}
